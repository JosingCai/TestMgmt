# Generated by Django 3.0.2 on 2020-03-10 12:57

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CaseGroupInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('case_group_name', models.CharField(db_index=True, help_text='请输入用例组名称', max_length=32, verbose_name='用例组名称')),
                ('case_group_describe', models.CharField(blank=True, default='', help_text='请输入用例组描述', max_length=255, null=True, verbose_name='用例组描述')),
                ('create_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
            ],
            options={
                'verbose_name': '用例组列表',
                'verbose_name_plural': '用例组列表',
                'db_table': 'case_group_info',
            },
        ),
        migrations.CreateModel(
            name='Host',
            fields=[
                ('project_id', models.CharField(help_text='请输入产品名称', max_length=255, primary_key=True, serialize=False, verbose_name='产品/版本名称')),
                ('ip', models.GenericIPAddressField(blank=True, null=True)),
                ('protocol', models.CharField(choices=[('http', 'http'), ('https', 'https')], default='http', help_text='请选择协议http/https', max_length=5, verbose_name='协议')),
                ('auth', models.CharField(choices=[('yes', 'yes'), ('no', 'no')], default='yes', help_text='请选择鉴权yes/no', max_length=3, verbose_name='是否鉴权')),
                ('prepath', models.CharField(blank=True, default='', help_text='请输入api前缀', max_length=255, verbose_name='api前缀')),
                ('debug', models.CharField(choices=[('True', 'True'), ('False', 'False')], default='False', help_text='请选择模式True/False', max_length=5, verbose_name='调试模式')),
                ('threading', models.CharField(choices=[('True', 'True'), ('False', 'False')], default='False', help_text='请选择模式True/False', max_length=5, verbose_name='是否多线程')),
                ('usermode', models.CharField(choices=[('uam', 'uam'), ('native', 'native'), ('uc', 'uc')], default='uam', help_text='请选择模式uam/native/uc', max_length=6, verbose_name='用户模式')),
                ('dbconfig', models.CharField(blank=True, default='', help_text='请输入目标数据库信息,e.g.: user:pasword:10.x.x.x:3306:databasename', max_length=255, null=True, verbose_name='目标数据库')),
                ('token', models.TextField(blank=True, default='', help_text='请输入token信息', null=True, verbose_name='token')),
            ],
            options={
                'verbose_name': '测试环境',
                'verbose_name_plural': '测试环境',
                'db_table': 'host',
            },
        ),
        migrations.CreateModel(
            name='PerformanceInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('script_introduce', models.CharField(db_index=True, help_text='请输入压测脚本简介', max_length=32, verbose_name='脚本简介')),
                ('jmeter_script', models.FileField(help_text='请上传JMeter脚本', upload_to='jmeter/%Y%m%d%H%M%S', verbose_name='压测脚本')),
                ('sample_number', models.IntegerField(blank=True, default=1, help_text='请输入请求数', null=True, verbose_name='请求数')),
                ('duration', models.IntegerField(blank=True, default=1, help_text='请输入持续时间，单位：秒', null=True, verbose_name='持续时间')),
                ('create_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
            ],
            options={
                'verbose_name': '压测脚本列表',
                'verbose_name_plural': '压测脚本列表',
                'db_table': 'performance_info',
            },
        ),
        migrations.CreateModel(
            name='ProductInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_name', models.CharField(db_index=True, help_text='请输入产品线名称', max_length=32, verbose_name='产品线名称')),
                ('product_describe', models.TextField(blank=True, default='', help_text='请输入产品描述', null=True, verbose_name='产品描述')),
                ('product_manager', models.CharField(help_text='请输入产品经理', max_length=11, verbose_name='产品经理')),
                ('developer', models.CharField(blank=True, default='', help_text='请输入开发人员', max_length=11, null=True, verbose_name='开发人员')),
                ('tester', models.CharField(blank=True, default='', help_text='请输入测试人员', max_length=11, null=True, verbose_name='测试人员')),
                ('create_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
            ],
            options={
                'verbose_name': '产品线列表',
                'verbose_name_plural': '产品线列表',
                'db_table': 'product_info',
            },
        ),
        migrations.CreateModel(
            name='TestReport',
            fields=[
                ('allCount', models.IntegerField(blank=True, null=True, verbose_name='API总数')),
                ('automatableCount', models.IntegerField(blank=True, null=True, verbose_name='可自动化API总数')),
                ('unautomatableCount', models.IntegerField(blank=True, null=True, verbose_name='不可自动化API总数')),
                ('autoTestCount', models.IntegerField(blank=True, null=True, verbose_name='自动测试API总数')),
                ('unTestCount', models.IntegerField(blank=True, null=True, verbose_name='未自动化测试API总数')),
                ('passCount', models.IntegerField(blank=True, null=True, verbose_name='测试通过API总数')),
                ('failCount', models.IntegerField(blank=True, null=True, verbose_name='测试失败API总数')),
                ('autoPer', models.FloatField(blank=True, max_length=8, null=True, verbose_name='自动化测试百分比')),
                ('passPer', models.FloatField(blank=True, max_length=8, null=True, verbose_name='自动化测试成功百分比')),
                ('failPer', models.FloatField(blank=True, max_length=8, null=True, verbose_name='自动化测试失败百分比')),
                ('countTime', models.DateTimeField(db_index=True, primary_key=True, serialize=False, verbose_name='统计时间')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='AutoModel.Host', verbose_name='关联项目')),
            ],
            options={
                'verbose_name': 'API结果统计',
                'verbose_name_plural': 'API结果统计',
                'db_table': 'api_sum_up',
            },
        ),
        migrations.CreateModel(
            name='TestDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('case_id', models.CharField(max_length=255)),
                ('APIFunction', models.CharField(blank=True, max_length=255)),
                ('url', models.CharField(max_length=255)),
                ('body', models.TextField(blank=True)),
                ('response', models.TextField(blank=True)),
                ('failReason', models.TextField(blank=True)),
                ('testTime', models.CharField(blank=True, max_length=255)),
                ('testResult', models.CharField(blank=True, max_length=255)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='AutoModel.Host', verbose_name='关联项目')),
            ],
            options={
                'verbose_name': 'API测试详情',
                'verbose_name_plural': 'API测试详情',
                'db_table': 'testdetail',
                'ordering': ['case_id'],
            },
        ),
        migrations.CreateModel(
            name='PerformanceResultInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_report', models.CharField(blank=True, db_index=True, help_text='测试报告', max_length=100, null=True, verbose_name='测试报告')),
                ('jtl', models.CharField(blank=True, help_text='jtl文件', max_length=100, null=True, verbose_name='jtl文件')),
                ('dashboard_report', models.CharField(blank=True, help_text='Dashboard Report文件', max_length=100, null=True, verbose_name='Dashboard Report文件')),
                ('run_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='运行时间')),
                ('script_result', models.ForeignKey(help_text='请选择压测脚本', on_delete=django.db.models.deletion.CASCADE, related_name='scripts', to='AutoModel.PerformanceInfo', verbose_name='压测脚本')),
            ],
            options={
                'verbose_name': '压测结果列表',
                'verbose_name_plural': '压测结果列表',
                'db_table': 'performance_result_info',
            },
        ),
        migrations.CreateModel(
            name='ModuleInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('module_name', models.CharField(db_index=True, help_text='请输入模块名称', max_length=32, verbose_name='模块名称')),
                ('module_describe', models.TextField(blank=True, default='', help_text='请输入模块描述', null=True, verbose_name='模块描述')),
                ('create_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
                ('module_group', models.ForeignKey(help_text='请选择产品线', on_delete=django.db.models.deletion.CASCADE, related_name='products', to='AutoModel.ProductInfo', verbose_name='产品线')),
            ],
            options={
                'verbose_name': '模块列表',
                'verbose_name_plural': '模块列表',
                'db_table': 'module_info',
            },
        ),
        migrations.CreateModel(
            name='InterfaceInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('case_name', models.CharField(db_index=True, help_text='请输入用例名称', max_length=32, verbose_name='用例名称')),
                ('interface_url', models.CharField(help_text='请输入接口地址', max_length=255, verbose_name='接口地址')),
                ('request_mode', models.CharField(choices=[('GET', 'GET'), ('POST', 'POST'), ('PUT', 'PUT'), ('DELETE', 'DELETE'), ('PATCH', 'PATCH')], default='GET', help_text='请选择请求方式', max_length=11, verbose_name='请求方式')),
                ('request_parameter', models.TextField(blank=True, default='', help_text='请输入字典格式的请求参数', null=True, verbose_name='请求参数')),
                ('request_head', models.TextField(blank=True, default='', help_text='请输入字典格式的请求头', null=True, verbose_name='请求头')),
                ('body_type', models.CharField(blank=True, choices=[('x-www-form-urlencoded', 'application/x-www-form-urlencoded'), ('json', 'application/json'), ('form-data', 'multipart/form-data'), ('xml', 'text/xml')], default='x-www-form-urlencoded', help_text='请选择请求体类型', max_length=21, null=True, verbose_name='请求体类型')),
                ('request_body', models.TextField(blank=True, default='', help_text='请输入浏览器原生表单、json、文件或xml格式的请求体', null=True, verbose_name='请求体')),
                ('expected_result', models.TextField(blank=True, default='', help_text='请输入预期结果', null=True, verbose_name='预期结果')),
                ('response_assert', models.CharField(blank=True, choices=[('包含', '包含'), ('相等', '相等')], default='包含', help_text='请选择断言方式', max_length=2, null=True, verbose_name='响应断言方式')),
                ('wait_time', models.FloatField(blank=True, default=0.1, help_text='请输入等待时间，单位：秒', max_length=5, null=True, verbose_name='等待时间')),
                ('regular_expression', models.CharField(blank=True, choices=[('开启', '开启'), ('不开启', '不开启')], default='不开启', help_text='请选择是否开启正则表达式', max_length=3, null=True, verbose_name='开启正则表达式')),
                ('regular_variable', models.CharField(blank=True, default='', help_text='请输入正则表达式变量名', max_length=11, null=True, verbose_name='正则表达式变量名')),
                ('regular_template', models.CharField(blank=True, default='', help_text='请输入正则表达式模板', max_length=255, null=True, verbose_name='正则表达式模板')),
                ('response_code', models.IntegerField(blank=True, null=True, verbose_name='响应代码')),
                ('actual_result', models.TextField(blank=True, null=True, verbose_name='实际结果')),
                ('pass_status', models.BooleanField(blank=True, null=True, verbose_name='是否通过')),
                ('create_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
                ('case_group', models.ForeignKey(help_text='请选择用例组', on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='AutoModel.CaseGroupInfo', verbose_name='用例组')),
            ],
            options={
                'verbose_name': '用例列表',
                'verbose_name_plural': '用例列表',
                'db_table': 'interface_info',
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('APIFunction', models.CharField(blank=True, max_length=255)),
                ('protocol', models.CharField(choices=[('http', 'http'), ('https', 'https')], max_length=5)),
                ('http_method', models.CharField(choices=[('get', 'get'), ('post', 'post'), ('put', 'put'), ('delete', 'delete')], max_length=6)),
                ('path', models.CharField(max_length=255)),
                ('header', models.CharField(blank=True, max_length=255)),
                ('pathVar', models.CharField(blank=True, max_length=255)),
                ('queryParam', models.CharField(blank=True, max_length=255)),
                ('body', models.CharField(blank=True, max_length=255)),
                ('response', models.TextField(blank=True)),
                ('case_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='AutoModel.Host', verbose_name='关联项目')),
            ],
            options={
                'verbose_name': 'API源信息',
                'verbose_name_plural': 'API源信息',
                'db_table': 'source',
                'ordering': ['case_id'],
                'unique_together': {('project', 'case_id')},
            },
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('case_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('requestVars', models.CharField(blank=True, max_length=255)),
                ('result', models.CharField(blank=True, max_length=255)),
                ('outVars', models.CharField(blank=True, max_length=255)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='AutoModel.Host', verbose_name='关联项目')),
            ],
            options={
                'verbose_name': '测试结果',
                'verbose_name_plural': '测试结果',
                'db_table': 'result',
                'ordering': ['case_id'],
                'unique_together': {('project', 'case_id')},
            },
        ),
        migrations.CreateModel(
            name='Dependency',
            fields=[
                ('case_id', models.CharField(help_text='请输入用例ID', max_length=255, primary_key=True, serialize=False, verbose_name='用例ID')),
                ('runNum', models.IntegerField(default=1, help_text='请输入执行的次数, 0代表不执行, 1代表全遍历执行, 其他代表执行的指定次数', verbose_name='执行次数')),
                ('beforeCase', models.CharField(blank=True, help_text='请输入前置用例,e.g: ["get_/path", "post_/path"]', max_length=255, verbose_name='前置用例')),
                ('afterCase', models.CharField(blank=True, help_text='请输入后置用例,e.g: ["get_/path", "post_/path"]', max_length=255, verbose_name='后置用例')),
                ('outVars', models.CharField(blank=True, help_text='请定义依赖变量,e.g: {"id: "content-id"}', max_length=255, verbose_name='提供依赖变量')),
                ('chkVars', models.CharField(blank=True, help_text='请转义验证变量,e.g: {"number: "content-id"}', max_length=255, verbose_name='验证返回变量')),
                ('param_def', models.CharField(blank=True, help_text='请定义依赖用例,e.g: ["get_/path", "post_/path"]', max_length=255, verbose_name='依赖用例')),
                ('raw', models.CharField(blank=True, max_length=4096)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='AutoModel.Host', verbose_name='关联项目')),
            ],
            options={
                'verbose_name': '用例依赖',
                'verbose_name_plural': '用例依赖',
                'db_table': 'dependency',
                'ordering': ['case_id'],
                'unique_together': {('project', 'case_id')},
            },
        ),
        migrations.CreateModel(
            name='ComVar',
            fields=[
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('value', models.TextField(blank=True)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='AutoModel.Host', verbose_name='关联项目')),
            ],
            options={
                'verbose_name': '公用变量',
                'verbose_name_plural': '公用变量',
                'db_table': 'comvar',
                'ordering': ['name'],
                'unique_together': {('project', 'name')},
            },
        ),
        migrations.CreateModel(
            name='CaseTestCount',
            fields=[
                ('case_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('APIFunction', models.CharField(max_length=255)),
                ('runTimes', models.IntegerField(blank=True)),
                ('testTimes', models.IntegerField(blank=True)),
                ('passTimes', models.IntegerField(blank=True)),
                ('failTimes', models.IntegerField(blank=True)),
                ('untestTimes', models.IntegerField(blank=True)),
                ('testResult', models.CharField(blank=True, max_length=255)),
                ('failReason', models.CharField(blank=True, max_length=255)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='AutoModel.Host', verbose_name='关联项目')),
            ],
            options={
                'verbose_name': 'API测试统计',
                'verbose_name_plural': 'API测试统计',
                'db_table': 'casetestcount',
                'ordering': ['case_id'],
                'unique_together': {('project', 'case_id')},
            },
        ),
    ]
